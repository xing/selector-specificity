
# line 1 "parse.rl"
require 'optparse' # cmdline options parser
require 'net/http' # net access
require 'uri' #converting url to uri

class Parser
   def initialize
     
     @errors_list = '';
     
      
# line 14 "generated/parse.rb"
class << self
	attr_accessor :_selector_actions
	private :_selector_actions, :_selector_actions=
end
self._selector_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 11, 1, 
	13, 1, 14, 1, 15, 1, 17, 1, 
	19, 1, 21, 1, 23, 1, 24, 2, 
	0, 14, 2, 1, 14, 2, 2, 14, 
	2, 3, 14, 2, 4, 14, 2, 5, 
	14, 2, 8, 9, 2, 9, 7, 2, 
	10, 13, 2, 12, 9, 2, 16, 9, 
	2, 18, 9, 2, 20, 9, 2, 22, 
	9, 3, 8, 9, 7, 3, 9, 10, 
	13, 3, 12, 9, 7, 3, 16, 9, 
	7, 3, 18, 9, 7, 3, 20, 9, 
	7, 3, 22, 9, 7, 4, 8, 9, 
	10, 13, 4, 12, 9, 10, 13, 4, 
	16, 9, 10, 13, 4, 18, 9, 10, 
	13, 4, 20, 9, 10, 13, 4, 22, 
	9, 10, 13
]

class << self
	attr_accessor :_selector_key_offsets
	private :_selector_key_offsets, :_selector_key_offsets=
end
self._selector_key_offsets = [
	0, 0, 8, 28, 48, 61, 76, 81, 
	102, 117, 123, 128, 148, 163, 166, 167, 
	168, 169, 170, 182, 193, 194, 200, 205, 
	223, 233, 234, 245, 246, 250, 262, 264, 
	270, 271, 272, 273, 274, 277, 278, 279, 
	280, 281, 282, 283, 284, 285, 289, 293, 
	295, 302, 314, 319, 339, 340, 341, 342, 
	343, 357, 371, 380, 385, 398, 403, 410, 
	411, 412, 416, 417, 418, 434, 450, 458, 
	478, 498, 511, 526, 531, 552, 567, 573, 
	578, 598, 613, 616, 617, 618, 619, 620, 
	632, 643, 644, 650, 655, 673, 683, 684, 
	695, 696, 700, 712, 714, 730, 746, 753, 
	765, 770, 790, 791, 796, 808, 813, 831, 
	838, 839, 840, 841, 842, 843, 844, 845, 
	846, 847, 848, 849, 851, 852, 853, 854, 
	855, 856, 871, 879, 891, 895, 907, 912, 
	919, 924, 929, 942, 948, 957, 965, 978, 
	991, 1004, 1017, 1031, 1032, 1047, 1048, 1064, 
	1066, 1079, 1092, 1104, 1119, 1132, 1145, 1158, 
	1171, 1184, 1197, 1210, 1222, 1236, 1249, 1261, 
	1274, 1287, 1300, 1313, 1324, 1325, 1331, 1336, 
	1354, 1364, 1365, 1376, 1377, 1381, 1382, 1387, 
	1399, 1404, 1422, 1429, 1431, 1432, 1433, 1434, 
	1435, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 
	1454, 1455, 1456, 1457, 1458, 1460, 1461, 1462, 
	1463, 1465, 1466, 1467, 1468, 1469, 1472, 1473, 
	1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 
	1482, 1483, 1484, 1485, 1486, 1487, 1489, 1491, 
	1492, 1493, 1507, 1508, 1523, 1524, 1540, 1542, 
	1543, 1544, 1546, 1547, 1548, 1550, 1551, 1552, 
	1553, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 
	1563, 1564, 1566, 1567, 1568, 1569, 1570, 1571, 
	1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 
	1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 
	1592, 1607, 1623, 1639, 1655, 1663, 1679, 1695, 
	1711, 1727, 1742, 1755, 1771, 1787, 1803, 1819, 
	1835, 1851, 1867, 1883, 1884, 1885, 1886, 1897, 
	1908, 1913, 1926, 1930, 1932, 1938, 1943, 1955, 
	1956, 1961, 1973, 1978, 1996, 2003, 2004, 2005, 
	2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 
	2014, 2016, 2017, 2018, 2019, 2020, 2021, 2036, 
	2044, 2056, 2060, 2072, 2077, 2084, 2089, 2094, 
	2107, 2113, 2122, 2130, 2143, 2156, 2169, 2182, 
	2196, 2197, 2212, 2213, 2229, 2231, 2244, 2257, 
	2269, 2284, 2297, 2310, 2323, 2336, 2349, 2362, 
	2375, 2387, 2401, 2414, 2426, 2439, 2452, 2465, 
	2478, 2489, 2490, 2496, 2501, 2519, 2529, 2530, 
	2541, 2542, 2546, 2547, 2552, 2564, 2569, 2587, 
	2594, 2596, 2597, 2598, 2599, 2600, 2612, 2613, 
	2614, 2615, 2616, 2617, 2618, 2619, 2620, 2621, 
	2622, 2623, 2625, 2626, 2627, 2628, 2630, 2631, 
	2632, 2633, 2634, 2637, 2638, 2639, 2640, 2641, 
	2642, 2643, 2644, 2645, 2646, 2647, 2648, 2649, 
	2650, 2651, 2652, 2654, 2656, 2657, 2658, 2672, 
	2673, 2688, 2689, 2705, 2707, 2708, 2709, 2711, 
	2712, 2713, 2715, 2716, 2717, 2718, 2721, 2722, 
	2723, 2724, 2725, 2726, 2727, 2728, 2729, 2731, 
	2732, 2733, 2734, 2735, 2736, 2737, 2738, 2739, 
	2740, 2741, 2742, 2743, 2744, 2745, 2746, 2747, 
	2748, 2749, 2750, 2751, 2757, 2758, 2759, 2760, 
	2761, 2766, 2767, 2768, 2769, 2770, 2771, 2777, 
	2783, 2784, 2801, 2802, 2806, 2807, 2816, 2821, 
	2834, 2839, 2848, 2862, 2867, 2884, 2902, 2920, 
	2938, 2948, 2949, 2950, 2954, 2955, 2956, 2974, 
	2992, 3010, 3028, 3045, 3060, 3078, 3096, 3114, 
	3132, 3150, 3168, 3186, 3204, 3205, 3206, 3207, 
	3208, 3209, 3221, 3233, 3237, 3255, 3268, 3281, 
	3294, 3307, 3320, 3332, 3333, 3334, 3335, 3340, 
	3341, 3342, 3343, 3344, 3345, 3346, 3347, 3348, 
	3349, 3350, 3351, 3352, 3364, 3376, 3377, 3381, 
	3387, 3388, 3389, 3390, 3391, 3395, 3396, 3401, 
	3415, 3421, 3422, 3423, 3424, 3436, 3448, 3452, 
	3470, 3483, 3496, 3509, 3522, 3535, 3547, 3548, 
	3549, 3550, 3555, 3556, 3557, 3558, 3559, 3574, 
	3589, 3604, 3610, 3611, 3612, 3613, 3614, 3615, 
	3616, 3621, 3622, 3626, 3627, 3628, 3645, 3662, 
	3679, 3696, 3713, 3730, 3747, 3764, 3781, 3798, 
	3815, 3832, 3849
]

class << self
	attr_accessor :_selector_trans_keys
	private :_selector_trans_keys, :_selector_trans_keys=
end
self._selector_trans_keys = [
	45, 95, 48, 57, 65, 90, 97, 122, 
	32, 35, 43, 44, 45, 46, 58, 62, 
	91, 95, 123, 126, 9, 13, 48, 57, 
	65, 90, 97, 122, 32, 35, 42, 43, 
	44, 45, 46, 58, 62, 91, 95, 123, 
	124, 126, 9, 13, 65, 90, 97, 122, 
	32, 35, 43, 44, 46, 58, 62, 91, 
	123, 124, 126, 9, 13, 32, 35, 42, 
	45, 46, 58, 91, 95, 124, 9, 13, 
	65, 90, 97, 122, 95, 65, 90, 97, 
	122, 32, 35, 43, 44, 45, 46, 58, 
	62, 91, 95, 123, 124, 126, 9, 13, 
	48, 57, 65, 90, 97, 122, 32, 35, 
	42, 45, 46, 58, 91, 95, 124, 9, 
	13, 65, 90, 97, 122, 45, 95, 65, 
	90, 97, 122, 95, 65, 90, 97, 122, 
	32, 35, 43, 44, 45, 46, 58, 62, 
	91, 95, 123, 126, 9, 13, 48, 57, 
	65, 90, 97, 122, 58, 78, 97, 98, 
	99, 100, 101, 102, 104, 108, 110, 111, 
	114, 116, 118, 97, 98, 102, 102, 116, 
	101, 114, 32, 35, 43, 44, 46, 58, 
	62, 91, 123, 126, 9, 13, 32, 42, 
	45, 95, 124, 9, 13, 65, 90, 97, 
	122, 124, 45, 95, 65, 90, 97, 122, 
	95, 65, 90, 97, 122, 32, 36, 42, 
	45, 61, 93, 94, 95, 124, 126, 9, 
	13, 48, 57, 65, 90, 97, 122, 32, 
	36, 42, 61, 93, 94, 124, 126, 9, 
	13, 61, 32, 34, 39, 45, 95, 9, 
	13, 65, 90, 97, 122, 34, 32, 93, 
	9, 13, 32, 35, 43, 44, 46, 58, 
	62, 91, 123, 126, 9, 13, 123, 125, 
	45, 95, 65, 90, 97, 122, 62, 33, 
	45, 45, 102, 109, 112, 111, 110, 116, 
	45, 102, 97, 99, 101, 32, 123, 9, 
	13, 32, 123, 9, 13, 123, 125, 42, 
	45, 95, 65, 90, 97, 122, 32, 35, 
	43, 44, 46, 58, 62, 91, 123, 126, 
	9, 13, 95, 65, 90, 97, 122, 32, 
	35, 43, 44, 45, 46, 58, 62, 91, 
	95, 123, 126, 9, 13, 48, 57, 65, 
	90, 97, 122, 101, 100, 105, 97, 32, 
	40, 45, 78, 79, 95, 110, 111, 9, 
	13, 65, 90, 97, 122, 32, 40, 45, 
	78, 79, 95, 110, 111, 9, 13, 65, 
	90, 97, 122, 32, 45, 95, 9, 13, 
	65, 90, 97, 122, 95, 65, 90, 97, 
	122, 32, 41, 45, 58, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, 32, 41, 
	58, 9, 13, 32, 44, 65, 97, 123, 
	9, 13, 78, 68, 32, 40, 9, 13, 
	110, 100, 32, 35, 42, 45, 46, 58, 
	91, 95, 124, 125, 9, 13, 65, 90, 
	97, 122, 32, 35, 42, 45, 46, 58, 
	91, 95, 124, 125, 9, 13, 65, 90, 
	97, 122, 45, 95, 48, 57, 65, 90, 
	97, 122, 32, 35, 43, 44, 45, 46, 
	58, 62, 91, 95, 123, 126, 9, 13, 
	48, 57, 65, 90, 97, 122, 32, 35, 
	42, 43, 44, 45, 46, 58, 62, 91, 
	95, 123, 124, 126, 9, 13, 65, 90, 
	97, 122, 32, 35, 43, 44, 46, 58, 
	62, 91, 123, 124, 126, 9, 13, 32, 
	35, 42, 45, 46, 58, 91, 95, 124, 
	9, 13, 65, 90, 97, 122, 95, 65, 
	90, 97, 122, 32, 35, 43, 44, 45, 
	46, 58, 62, 91, 95, 123, 124, 126, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	32, 35, 42, 45, 46, 58, 91, 95, 
	124, 9, 13, 65, 90, 97, 122, 45, 
	95, 65, 90, 97, 122, 95, 65, 90, 
	97, 122, 32, 35, 43, 44, 45, 46, 
	58, 62, 91, 95, 123, 126, 9, 13, 
	48, 57, 65, 90, 97, 122, 58, 78, 
	97, 98, 99, 100, 101, 102, 104, 108, 
	110, 111, 114, 116, 118, 97, 98, 102, 
	102, 116, 101, 114, 32, 35, 43, 44, 
	46, 58, 62, 91, 123, 126, 9, 13, 
	32, 42, 45, 95, 124, 9, 13, 65, 
	90, 97, 122, 124, 45, 95, 65, 90, 
	97, 122, 95, 65, 90, 97, 122, 32, 
	36, 42, 45, 61, 93, 94, 95, 124, 
	126, 9, 13, 48, 57, 65, 90, 97, 
	122, 32, 36, 42, 61, 93, 94, 124, 
	126, 9, 13, 61, 32, 34, 39, 45, 
	95, 9, 13, 65, 90, 97, 122, 34, 
	32, 93, 9, 13, 32, 35, 43, 44, 
	46, 58, 62, 91, 123, 126, 9, 13, 
	123, 125, 32, 35, 42, 45, 46, 58, 
	91, 95, 124, 125, 9, 13, 65, 90, 
	97, 122, 32, 35, 42, 45, 46, 58, 
	91, 95, 124, 125, 9, 13, 65, 90, 
	97, 122, 42, 45, 95, 65, 90, 97, 
	122, 32, 35, 43, 44, 46, 58, 62, 
	91, 123, 126, 9, 13, 95, 65, 90, 
	97, 122, 32, 35, 43, 44, 45, 46, 
	58, 62, 91, 95, 123, 126, 9, 13, 
	48, 57, 65, 90, 97, 122, 39, 95, 
	65, 90, 97, 122, 32, 45, 93, 95, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	95, 65, 90, 97, 122, 32, 36, 42, 
	45, 61, 93, 94, 95, 124, 126, 9, 
	13, 48, 57, 65, 90, 97, 122, 45, 
	61, 95, 65, 90, 97, 122, 101, 102, 
	111, 114, 101, 105, 114, 115, 116, 45, 
	108, 101, 105, 116, 110, 79, 84, 40, 
	32, 35, 42, 45, 46, 58, 91, 95, 
	124, 9, 13, 65, 90, 97, 122, 45, 
	95, 48, 57, 65, 90, 97, 122, 32, 
	41, 45, 95, 9, 13, 48, 57, 65, 
	90, 97, 122, 32, 41, 9, 13, 32, 
	35, 43, 44, 46, 58, 62, 91, 123, 
	126, 9, 13, 32, 41, 124, 9, 13, 
	42, 45, 95, 65, 90, 97, 122, 95, 
	65, 90, 97, 122, 95, 65, 90, 97, 
	122, 32, 41, 45, 95, 124, 9, 13, 
	48, 57, 65, 90, 97, 122, 45, 95, 
	65, 90, 97, 122, 45, 58, 95, 108, 
	110, 65, 90, 97, 122, 45, 95, 108, 
	110, 65, 90, 97, 122, 32, 41, 45, 
	95, 97, 9, 13, 48, 57, 65, 90, 
	98, 122, 32, 41, 45, 95, 110, 9, 
	13, 48, 57, 65, 90, 97, 122, 32, 
	41, 45, 95, 103, 9, 13, 48, 57, 
	65, 90, 97, 122, 32, 40, 41, 45, 
	95, 9, 13, 48, 57, 65, 90, 97, 
	122, 32, 34, 39, 43, 45, 95, 9, 
	13, 48, 57, 65, 90, 97, 122, 34, 
	32, 34, 39, 41, 43, 45, 95, 9, 
	13, 48, 57, 65, 90, 97, 122, 39, 
	32, 34, 39, 41, 43, 45, 46, 95, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	48, 57, 32, 41, 45, 95, 116, 9, 
	13, 48, 57, 65, 90, 97, 122, 32, 
	41, 45, 95, 104, 9, 13, 48, 57, 
	65, 90, 97, 122, 32, 41, 45, 95, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	32, 41, 45, 95, 99, 108, 111, 9, 
	13, 48, 57, 65, 90, 97, 122, 32, 
	41, 45, 95, 104, 9, 13, 48, 57, 
	65, 90, 97, 122, 32, 41, 45, 95, 
	105, 9, 13, 48, 57, 65, 90, 97, 
	122, 32, 41, 45, 95, 108, 9, 13, 
	48, 57, 65, 90, 97, 122, 32, 41, 
	45, 95, 100, 9, 13, 48, 57, 65, 
	90, 97, 122, 32, 41, 45, 95, 97, 
	9, 13, 48, 57, 65, 90, 98, 122, 
	32, 41, 45, 95, 115, 9, 13, 48, 
	57, 65, 90, 97, 122, 32, 41, 45, 
	95, 116, 9, 13, 48, 57, 65, 90, 
	97, 122, 32, 41, 45, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, 32, 41, 
	45, 95, 99, 111, 9, 13, 48, 57, 
	65, 90, 97, 122, 32, 41, 45, 95, 
	102, 9, 13, 48, 57, 65, 90, 97, 
	122, 32, 41, 45, 95, 9, 13, 48, 
	57, 65, 90, 97, 122, 32, 41, 45, 
	95, 116, 9, 13, 48, 57, 65, 90, 
	97, 122, 32, 41, 45, 95, 121, 9, 
	13, 48, 57, 65, 90, 97, 122, 32, 
	41, 45, 95, 112, 9, 13, 48, 57, 
	65, 90, 97, 122, 32, 41, 45, 95, 
	101, 9, 13, 48, 57, 65, 90, 97, 
	122, 32, 42, 45, 95, 124, 9, 13, 
	65, 90, 97, 122, 124, 45, 95, 65, 
	90, 97, 122, 95, 65, 90, 97, 122, 
	32, 36, 42, 45, 61, 93, 94, 95, 
	124, 126, 9, 13, 48, 57, 65, 90, 
	97, 122, 32, 36, 42, 61, 93, 94, 
	124, 126, 9, 13, 61, 32, 34, 39, 
	45, 95, 9, 13, 65, 90, 97, 122, 
	34, 32, 93, 9, 13, 39, 95, 65, 
	90, 97, 122, 32, 45, 93, 95, 9, 
	13, 48, 57, 65, 90, 97, 122, 95, 
	65, 90, 97, 122, 32, 36, 42, 45, 
	61, 93, 94, 95, 124, 126, 9, 13, 
	48, 57, 65, 90, 97, 122, 45, 61, 
	95, 65, 90, 97, 122, 99, 102, 116, 
	105, 118, 101, 32, 35, 43, 44, 46, 
	58, 62, 91, 123, 126, 9, 13, 104, 
	101, 99, 107, 101, 100, 105, 115, 97, 
	98, 108, 109, 110, 112, 116, 121, 105, 
	111, 114, 115, 116, 45, 99, 108, 111, 
	104, 105, 108, 102, 45, 116, 121, 112, 
	99, 117, 115, 111, 118, 101, 114, 97, 
	105, 110, 115, 103, 40, 32, 34, 39, 
	43, 45, 95, 9, 13, 48, 57, 65, 
	90, 97, 122, 34, 32, 34, 39, 41, 
	43, 45, 95, 9, 13, 48, 57, 65, 
	90, 97, 122, 39, 32, 34, 39, 41, 
	43, 45, 46, 95, 9, 13, 48, 57, 
	65, 90, 97, 122, 48, 57, 116, 45, 
	99, 111, 110, 107, 111, 116, 116, 104, 
	45, 99, 108, 111, 104, 105, 108, 100, 
	97, 115, 116, 45, 99, 111, 102, 45, 
	116, 121, 112, 101, 110, 108, 121, 111, 
	111, 116, 97, 114, 103, 101, 105, 115, 
	105, 116, 41, 95, 65, 90, 97, 122, 
	32, 44, 45, 65, 95, 97, 123, 9, 
	13, 48, 57, 66, 90, 98, 122, 32, 
	44, 45, 65, 78, 95, 97, 123, 9, 
	13, 48, 57, 66, 90, 98, 122, 32, 
	44, 45, 65, 68, 95, 97, 123, 9, 
	13, 48, 57, 66, 90, 98, 122, 32, 
	40, 44, 45, 65, 95, 97, 123, 9, 
	13, 48, 57, 66, 90, 98, 122, 32, 
	40, 44, 65, 97, 123, 9, 13, 32, 
	44, 45, 65, 95, 97, 110, 123, 9, 
	13, 48, 57, 66, 90, 98, 122, 32, 
	44, 45, 65, 95, 97, 100, 123, 9, 
	13, 48, 57, 66, 90, 98, 122, 32, 
	44, 45, 65, 79, 95, 97, 123, 9, 
	13, 48, 57, 66, 90, 98, 122, 32, 
	44, 45, 65, 84, 95, 97, 123, 9, 
	13, 48, 57, 66, 90, 98, 122, 32, 
	44, 45, 65, 95, 97, 123, 9, 13, 
	48, 57, 66, 90, 98, 122, 32, 44, 
	45, 65, 95, 97, 123, 9, 13, 66, 
	90, 98, 122, 32, 44, 45, 65, 78, 
	95, 97, 123, 9, 13, 48, 57, 66, 
	90, 98, 122, 32, 44, 45, 65, 76, 
	95, 97, 123, 9, 13, 48, 57, 66, 
	90, 98, 122, 32, 44, 45, 65, 89, 
	95, 97, 123, 9, 13, 48, 57, 66, 
	90, 98, 122, 32, 44, 45, 65, 95, 
	97, 111, 123, 9, 13, 48, 57, 66, 
	90, 98, 122, 32, 44, 45, 65, 95, 
	97, 116, 123, 9, 13, 48, 57, 66, 
	90, 98, 122, 32, 44, 45, 65, 95, 
	97, 110, 123, 9, 13, 48, 57, 66, 
	90, 98, 122, 32, 44, 45, 65, 95, 
	97, 108, 123, 9, 13, 48, 57, 66, 
	90, 98, 122, 32, 44, 45, 65, 95, 
	97, 121, 123, 9, 13, 48, 57, 66, 
	90, 98, 122, 97, 103, 101, 32, 45, 
	58, 95, 123, 9, 13, 65, 90, 97, 
	122, 32, 45, 58, 95, 123, 9, 13, 
	65, 90, 97, 122, 95, 65, 90, 97, 
	122, 32, 45, 58, 95, 123, 9, 13, 
	48, 57, 65, 90, 97, 122, 32, 123, 
	9, 13, 123, 125, 45, 95, 65, 90, 
	97, 122, 95, 65, 90, 97, 122, 32, 
	45, 95, 123, 9, 13, 48, 57, 65, 
	90, 97, 122, 39, 95, 65, 90, 97, 
	122, 32, 45, 93, 95, 9, 13, 48, 
	57, 65, 90, 97, 122, 95, 65, 90, 
	97, 122, 32, 36, 42, 45, 61, 93, 
	94, 95, 124, 126, 9, 13, 48, 57, 
	65, 90, 97, 122, 45, 61, 95, 65, 
	90, 97, 122, 101, 102, 111, 114, 101, 
	105, 114, 115, 116, 45, 108, 101, 105, 
	116, 110, 79, 84, 40, 32, 35, 42, 
	45, 46, 58, 91, 95, 124, 9, 13, 
	65, 90, 97, 122, 45, 95, 48, 57, 
	65, 90, 97, 122, 32, 41, 45, 95, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	32, 41, 9, 13, 32, 35, 43, 44, 
	46, 58, 62, 91, 123, 126, 9, 13, 
	32, 41, 124, 9, 13, 42, 45, 95, 
	65, 90, 97, 122, 95, 65, 90, 97, 
	122, 95, 65, 90, 97, 122, 32, 41, 
	45, 95, 124, 9, 13, 48, 57, 65, 
	90, 97, 122, 45, 95, 65, 90, 97, 
	122, 45, 58, 95, 108, 110, 65, 90, 
	97, 122, 45, 95, 108, 110, 65, 90, 
	97, 122, 32, 41, 45, 95, 97, 9, 
	13, 48, 57, 65, 90, 98, 122, 32, 
	41, 45, 95, 110, 9, 13, 48, 57, 
	65, 90, 97, 122, 32, 41, 45, 95, 
	103, 9, 13, 48, 57, 65, 90, 97, 
	122, 32, 40, 41, 45, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, 32, 34, 
	39, 43, 45, 95, 9, 13, 48, 57, 
	65, 90, 97, 122, 34, 32, 34, 39, 
	41, 43, 45, 95, 9, 13, 48, 57, 
	65, 90, 97, 122, 39, 32, 34, 39, 
	41, 43, 45, 46, 95, 9, 13, 48, 
	57, 65, 90, 97, 122, 48, 57, 32, 
	41, 45, 95, 116, 9, 13, 48, 57, 
	65, 90, 97, 122, 32, 41, 45, 95, 
	104, 9, 13, 48, 57, 65, 90, 97, 
	122, 32, 41, 45, 95, 9, 13, 48, 
	57, 65, 90, 97, 122, 32, 41, 45, 
	95, 99, 108, 111, 9, 13, 48, 57, 
	65, 90, 97, 122, 32, 41, 45, 95, 
	104, 9, 13, 48, 57, 65, 90, 97, 
	122, 32, 41, 45, 95, 105, 9, 13, 
	48, 57, 65, 90, 97, 122, 32, 41, 
	45, 95, 108, 9, 13, 48, 57, 65, 
	90, 97, 122, 32, 41, 45, 95, 100, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	32, 41, 45, 95, 97, 9, 13, 48, 
	57, 65, 90, 98, 122, 32, 41, 45, 
	95, 115, 9, 13, 48, 57, 65, 90, 
	97, 122, 32, 41, 45, 95, 116, 9, 
	13, 48, 57, 65, 90, 97, 122, 32, 
	41, 45, 95, 9, 13, 48, 57, 65, 
	90, 97, 122, 32, 41, 45, 95, 99, 
	111, 9, 13, 48, 57, 65, 90, 97, 
	122, 32, 41, 45, 95, 102, 9, 13, 
	48, 57, 65, 90, 97, 122, 32, 41, 
	45, 95, 9, 13, 48, 57, 65, 90, 
	97, 122, 32, 41, 45, 95, 116, 9, 
	13, 48, 57, 65, 90, 97, 122, 32, 
	41, 45, 95, 121, 9, 13, 48, 57, 
	65, 90, 97, 122, 32, 41, 45, 95, 
	112, 9, 13, 48, 57, 65, 90, 97, 
	122, 32, 41, 45, 95, 101, 9, 13, 
	48, 57, 65, 90, 97, 122, 32, 42, 
	45, 95, 124, 9, 13, 65, 90, 97, 
	122, 124, 45, 95, 65, 90, 97, 122, 
	95, 65, 90, 97, 122, 32, 36, 42, 
	45, 61, 93, 94, 95, 124, 126, 9, 
	13, 48, 57, 65, 90, 97, 122, 32, 
	36, 42, 61, 93, 94, 124, 126, 9, 
	13, 61, 32, 34, 39, 45, 95, 9, 
	13, 65, 90, 97, 122, 34, 32, 93, 
	9, 13, 39, 95, 65, 90, 97, 122, 
	32, 45, 93, 95, 9, 13, 48, 57, 
	65, 90, 97, 122, 95, 65, 90, 97, 
	122, 32, 36, 42, 45, 61, 93, 94, 
	95, 124, 126, 9, 13, 48, 57, 65, 
	90, 97, 122, 45, 61, 95, 65, 90, 
	97, 122, 99, 102, 116, 105, 118, 101, 
	32, 35, 43, 44, 46, 58, 62, 91, 
	123, 126, 9, 13, 104, 101, 99, 107, 
	101, 100, 105, 115, 97, 98, 108, 109, 
	110, 112, 116, 121, 105, 111, 114, 115, 
	116, 45, 99, 108, 111, 104, 105, 108, 
	102, 45, 116, 121, 112, 99, 117, 115, 
	111, 118, 101, 114, 97, 105, 110, 115, 
	103, 40, 32, 34, 39, 43, 45, 95, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	34, 32, 34, 39, 41, 43, 45, 95, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	39, 32, 34, 39, 41, 43, 45, 46, 
	95, 9, 13, 48, 57, 65, 90, 97, 
	122, 48, 57, 116, 45, 99, 111, 110, 
	107, 111, 116, 116, 104, 45, 99, 108, 
	111, 104, 105, 108, 100, 97, 115, 116, 
	45, 99, 111, 102, 45, 116, 121, 112, 
	101, 110, 108, 121, 111, 111, 116, 97, 
	114, 103, 101, 105, 115, 105, 116, 45, 
	95, 65, 90, 97, 122, 62, 33, 45, 
	45, 102, 105, 109, 110, 112, 109, 112, 
	111, 114, 116, 32, 34, 39, 117, 9, 
	13, 32, 34, 39, 117, 9, 13, 34, 
	32, 34, 39, 40, 45, 59, 78, 79, 
	95, 110, 111, 9, 13, 65, 90, 97, 
	122, 34, 32, 59, 9, 13, 39, 32, 
	45, 95, 9, 13, 65, 90, 97, 122, 
	95, 65, 90, 97, 122, 32, 41, 45, 
	58, 95, 9, 13, 48, 57, 65, 90, 
	97, 122, 32, 41, 58, 9, 13, 32, 
	34, 39, 44, 59, 65, 97, 9, 13, 
	32, 40, 45, 78, 79, 95, 110, 111, 
	9, 13, 65, 90, 97, 122, 95, 65, 
	90, 97, 122, 32, 34, 39, 44, 45, 
	59, 65, 95, 97, 9, 13, 48, 57, 
	66, 90, 98, 122, 32, 34, 39, 44, 
	45, 59, 65, 78, 95, 97, 9, 13, 
	48, 57, 66, 90, 98, 122, 32, 34, 
	39, 44, 45, 59, 65, 68, 95, 97, 
	9, 13, 48, 57, 66, 90, 98, 122, 
	32, 34, 39, 40, 44, 45, 59, 65, 
	95, 97, 9, 13, 48, 57, 66, 90, 
	98, 122, 32, 34, 39, 40, 44, 59, 
	65, 97, 9, 13, 78, 68, 32, 40, 
	9, 13, 110, 100, 32, 34, 39, 44, 
	45, 59, 65, 95, 97, 110, 9, 13, 
	48, 57, 66, 90, 98, 122, 32, 34, 
	39, 44, 45, 59, 65, 95, 97, 100, 
	9, 13, 48, 57, 66, 90, 98, 122, 
	32, 34, 39, 44, 45, 59, 65, 79, 
	95, 97, 9, 13, 48, 57, 66, 90, 
	98, 122, 32, 34, 39, 44, 45, 59, 
	65, 84, 95, 97, 9, 13, 48, 57, 
	66, 90, 98, 122, 32, 34, 39, 44, 
	45, 59, 65, 95, 97, 9, 13, 48, 
	57, 66, 90, 98, 122, 32, 34, 39, 
	44, 45, 59, 65, 95, 97, 9, 13, 
	66, 90, 98, 122, 32, 34, 39, 44, 
	45, 59, 65, 78, 95, 97, 9, 13, 
	48, 57, 66, 90, 98, 122, 32, 34, 
	39, 44, 45, 59, 65, 76, 95, 97, 
	9, 13, 48, 57, 66, 90, 98, 122, 
	32, 34, 39, 44, 45, 59, 65, 89, 
	95, 97, 9, 13, 48, 57, 66, 90, 
	98, 122, 32, 34, 39, 44, 45, 59, 
	65, 95, 97, 111, 9, 13, 48, 57, 
	66, 90, 98, 122, 32, 34, 39, 44, 
	45, 59, 65, 95, 97, 116, 9, 13, 
	48, 57, 66, 90, 98, 122, 32, 34, 
	39, 44, 45, 59, 65, 95, 97, 110, 
	9, 13, 48, 57, 66, 90, 98, 122, 
	32, 34, 39, 44, 45, 59, 65, 95, 
	97, 108, 9, 13, 48, 57, 66, 90, 
	98, 122, 32, 34, 39, 44, 45, 59, 
	65, 95, 97, 121, 9, 13, 48, 57, 
	66, 90, 98, 122, 41, 39, 114, 108, 
	40, 32, 34, 39, 40, 41, 92, 0, 
	8, 9, 13, 14, 31, 32, 34, 41, 
	92, 0, 8, 9, 13, 14, 31, 39, 
	40, 32, 41, 9, 13, 32, 34, 41, 
	92, 0, 8, 9, 13, 14, 31, 39, 
	40, 48, 57, 65, 70, 97, 102, 32, 
	34, 41, 92, 123, 0, 8, 9, 13, 
	14, 31, 39, 40, 32, 34, 41, 49, 
	92, 0, 8, 9, 13, 14, 31, 39, 
	40, 32, 34, 41, 44, 92, 0, 8, 
	9, 13, 14, 31, 39, 40, 32, 34, 
	41, 54, 92, 0, 8, 9, 13, 14, 
	31, 39, 40, 32, 34, 41, 92, 125, 
	0, 8, 9, 13, 14, 31, 39, 40, 
	32, 34, 39, 40, 41, 92, 0, 8, 
	9, 13, 14, 31, 13, 10, 124, 32, 
	9, 10, 12, 13, 41, 63, 34, 39, 
	97, 109, 101, 115, 112, 97, 99, 101, 
	32, 34, 39, 45, 95, 117, 9, 13, 
	65, 90, 97, 122, 32, 34, 39, 45, 
	95, 117, 9, 13, 65, 90, 97, 122, 
	34, 32, 59, 9, 13, 45, 95, 65, 
	90, 97, 122, 62, 33, 45, 45, 102, 
	109, 110, 112, 39, 95, 65, 90, 97, 
	122, 32, 34, 39, 45, 95, 117, 9, 
	13, 48, 57, 65, 90, 97, 122, 32, 
	34, 39, 117, 9, 13, 114, 108, 40, 
	32, 34, 39, 40, 41, 92, 0, 8, 
	9, 13, 14, 31, 32, 34, 41, 92, 
	0, 8, 9, 13, 14, 31, 39, 40, 
	32, 41, 9, 13, 32, 34, 41, 92, 
	0, 8, 9, 13, 14, 31, 39, 40, 
	48, 57, 65, 70, 97, 102, 32, 34, 
	41, 92, 123, 0, 8, 9, 13, 14, 
	31, 39, 40, 32, 34, 41, 49, 92, 
	0, 8, 9, 13, 14, 31, 39, 40, 
	32, 34, 41, 44, 92, 0, 8, 9, 
	13, 14, 31, 39, 40, 32, 34, 41, 
	54, 92, 0, 8, 9, 13, 14, 31, 
	39, 40, 32, 34, 41, 92, 125, 0, 
	8, 9, 13, 14, 31, 39, 40, 32, 
	34, 39, 40, 41, 92, 0, 8, 9, 
	13, 14, 31, 13, 10, 124, 32, 9, 
	10, 12, 13, 41, 63, 34, 39, 32, 
	34, 39, 45, 95, 114, 117, 9, 13, 
	48, 57, 65, 90, 97, 122, 32, 34, 
	39, 45, 95, 108, 117, 9, 13, 48, 
	57, 65, 90, 97, 122, 32, 34, 39, 
	40, 45, 95, 117, 9, 13, 48, 57, 
	65, 90, 97, 122, 99, 102, 105, 109, 
	110, 112, 104, 97, 114, 115, 101, 116, 
	32, 34, 39, 9, 13, 34, 32, 59, 
	9, 13, 39, 125, 32, 35, 42, 45, 
	46, 58, 60, 64, 91, 95, 124, 9, 
	13, 65, 90, 97, 122, 32, 35, 42, 
	45, 46, 58, 60, 64, 91, 95, 124, 
	9, 13, 65, 90, 97, 122, 32, 35, 
	42, 45, 46, 58, 60, 64, 91, 95, 
	124, 9, 13, 65, 90, 97, 122, 32, 
	35, 42, 45, 46, 58, 60, 64, 91, 
	95, 124, 9, 13, 65, 90, 97, 122, 
	32, 35, 42, 45, 46, 58, 60, 64, 
	91, 95, 124, 9, 13, 65, 90, 97, 
	122, 32, 35, 42, 45, 46, 58, 60, 
	64, 91, 95, 124, 9, 13, 65, 90, 
	97, 122, 32, 35, 42, 45, 46, 58, 
	60, 64, 91, 95, 124, 9, 13, 65, 
	90, 97, 122, 32, 35, 42, 45, 46, 
	58, 60, 64, 91, 95, 124, 9, 13, 
	65, 90, 97, 122, 32, 35, 42, 45, 
	46, 58, 60, 64, 91, 95, 124, 9, 
	13, 65, 90, 97, 122, 32, 35, 42, 
	45, 46, 58, 60, 64, 91, 95, 124, 
	9, 13, 65, 90, 97, 122, 32, 35, 
	42, 45, 46, 58, 60, 64, 91, 95, 
	124, 9, 13, 65, 90, 97, 122, 32, 
	35, 42, 45, 46, 58, 60, 64, 91, 
	95, 124, 9, 13, 65, 90, 97, 122, 
	32, 35, 42, 45, 46, 58, 60, 64, 
	91, 95, 124, 9, 13, 65, 90, 97, 
	122, 32, 9, 13, 0
]

class << self
	attr_accessor :_selector_single_lengths
	private :_selector_single_lengths, :_selector_single_lengths=
end
self._selector_single_lengths = [
	0, 2, 12, 14, 11, 9, 1, 13, 
	9, 2, 1, 12, 15, 3, 1, 1, 
	1, 1, 10, 5, 1, 2, 1, 10, 
	8, 1, 5, 1, 2, 10, 2, 2, 
	1, 1, 1, 1, 3, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 2, 2, 
	3, 10, 1, 12, 1, 1, 1, 1, 
	8, 8, 3, 1, 5, 3, 5, 1, 
	1, 2, 1, 1, 10, 10, 2, 12, 
	14, 11, 9, 1, 13, 9, 2, 1, 
	12, 15, 3, 1, 1, 1, 1, 10, 
	5, 1, 2, 1, 10, 8, 1, 5, 
	1, 2, 10, 2, 10, 10, 3, 10, 
	1, 12, 1, 1, 4, 1, 10, 3, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 9, 2, 4, 2, 10, 3, 3, 
	1, 1, 5, 2, 5, 4, 5, 5, 
	5, 5, 6, 1, 7, 1, 8, 0, 
	5, 5, 4, 7, 5, 5, 5, 5, 
	5, 5, 5, 4, 6, 5, 4, 5, 
	5, 5, 5, 5, 1, 2, 1, 10, 
	8, 1, 5, 1, 2, 1, 1, 4, 
	1, 10, 3, 2, 1, 1, 1, 1, 
	10, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	2, 1, 1, 1, 1, 3, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 2, 1, 
	1, 6, 1, 7, 1, 8, 0, 1, 
	1, 2, 1, 1, 2, 1, 1, 1, 
	3, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	7, 8, 8, 8, 6, 8, 8, 8, 
	8, 7, 7, 8, 8, 8, 8, 8, 
	8, 8, 8, 1, 1, 1, 5, 5, 
	1, 5, 2, 2, 2, 1, 4, 1, 
	1, 4, 1, 10, 3, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 1, 9, 2, 
	4, 2, 10, 3, 3, 1, 1, 5, 
	2, 5, 4, 5, 5, 5, 5, 6, 
	1, 7, 1, 8, 0, 5, 5, 4, 
	7, 5, 5, 5, 5, 5, 5, 5, 
	4, 6, 5, 4, 5, 5, 5, 5, 
	5, 1, 2, 1, 10, 8, 1, 5, 
	1, 2, 1, 1, 4, 1, 10, 3, 
	2, 1, 1, 1, 1, 10, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 2, 1, 1, 
	1, 1, 3, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 2, 1, 1, 6, 1, 
	7, 1, 8, 0, 1, 1, 2, 1, 
	1, 2, 1, 1, 1, 3, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	5, 1, 1, 1, 1, 1, 4, 4, 
	1, 11, 1, 2, 1, 3, 1, 5, 
	3, 7, 8, 1, 9, 10, 10, 10, 
	8, 1, 1, 2, 1, 1, 10, 10, 
	10, 10, 9, 9, 10, 10, 10, 10, 
	10, 10, 10, 10, 1, 1, 1, 1, 
	1, 6, 4, 2, 4, 5, 5, 5, 
	5, 5, 6, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 6, 6, 1, 2, 2, 
	1, 1, 1, 1, 4, 1, 1, 6, 
	4, 1, 1, 1, 6, 4, 2, 4, 
	5, 5, 5, 5, 5, 6, 1, 1, 
	1, 1, 1, 1, 1, 1, 7, 7, 
	7, 6, 1, 1, 1, 1, 1, 1, 
	3, 1, 2, 1, 1, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1
]

class << self
	attr_accessor :_selector_range_lengths
	private :_selector_range_lengths, :_selector_range_lengths=
end
self._selector_range_lengths = [
	0, 3, 4, 3, 1, 3, 2, 4, 
	3, 2, 2, 4, 0, 0, 0, 0, 
	0, 0, 1, 3, 0, 2, 2, 4, 
	1, 0, 3, 0, 1, 1, 0, 2, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	2, 1, 2, 4, 0, 0, 0, 0, 
	3, 3, 3, 2, 4, 1, 1, 0, 
	0, 1, 0, 0, 3, 3, 3, 4, 
	3, 1, 3, 2, 4, 3, 2, 2, 
	4, 0, 0, 0, 0, 0, 0, 1, 
	3, 0, 2, 2, 4, 1, 0, 3, 
	0, 1, 1, 0, 3, 3, 2, 1, 
	2, 4, 0, 2, 4, 2, 4, 2, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 3, 3, 4, 1, 1, 1, 2, 
	2, 2, 4, 2, 2, 2, 4, 4, 
	4, 4, 4, 0, 4, 0, 4, 1, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 3, 0, 2, 2, 4, 
	1, 0, 3, 0, 1, 0, 2, 4, 
	2, 4, 2, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 4, 0, 4, 0, 4, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 2, 
	4, 4, 4, 4, 1, 4, 4, 4, 
	4, 4, 3, 4, 4, 4, 4, 4, 
	4, 4, 4, 0, 0, 0, 3, 3, 
	2, 4, 1, 0, 2, 2, 4, 0, 
	2, 4, 2, 4, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 3, 3, 
	4, 1, 1, 1, 2, 2, 2, 4, 
	2, 2, 2, 4, 4, 4, 4, 4, 
	0, 4, 0, 4, 1, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	3, 0, 2, 2, 4, 1, 0, 3, 
	0, 1, 0, 2, 4, 2, 4, 2, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 4, 0, 
	4, 0, 4, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	0, 3, 0, 1, 0, 3, 2, 4, 
	1, 1, 3, 2, 4, 4, 4, 4, 
	1, 0, 0, 1, 0, 0, 4, 4, 
	4, 4, 4, 3, 4, 4, 4, 4, 
	4, 4, 4, 4, 0, 0, 0, 0, 
	0, 3, 4, 1, 7, 4, 4, 4, 
	4, 4, 3, 0, 0, 0, 2, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 3, 3, 0, 1, 2, 
	0, 0, 0, 0, 0, 0, 2, 4, 
	1, 0, 0, 0, 3, 4, 1, 7, 
	4, 4, 4, 4, 4, 3, 0, 0, 
	0, 2, 0, 0, 0, 0, 4, 4, 
	4, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 1, 0, 0, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 1
]

class << self
	attr_accessor :_selector_index_offsets
	private :_selector_index_offsets, :_selector_index_offsets=
end
self._selector_index_offsets = [
	0, 0, 6, 23, 41, 54, 67, 71, 
	89, 102, 107, 111, 128, 144, 148, 150, 
	152, 154, 156, 168, 177, 179, 184, 188, 
	203, 213, 215, 224, 226, 230, 242, 245, 
	250, 252, 254, 256, 258, 262, 264, 266, 
	268, 270, 272, 274, 276, 278, 282, 286, 
	289, 295, 307, 311, 328, 330, 332, 334, 
	336, 348, 360, 367, 371, 381, 386, 393, 
	395, 397, 401, 403, 405, 419, 433, 439, 
	456, 474, 487, 500, 504, 522, 535, 540, 
	544, 561, 577, 581, 583, 585, 587, 589, 
	601, 610, 612, 617, 621, 636, 646, 648, 
	657, 659, 663, 675, 678, 692, 706, 712, 
	724, 728, 745, 747, 751, 760, 764, 779, 
	785, 787, 789, 791, 793, 795, 797, 799, 
	801, 803, 805, 807, 810, 812, 814, 816, 
	818, 820, 833, 839, 848, 852, 864, 869, 
	875, 879, 883, 893, 898, 906, 913, 923, 
	933, 943, 953, 964, 966, 978, 980, 993, 
	995, 1005, 1015, 1024, 1036, 1046, 1056, 1066, 
	1076, 1086, 1096, 1106, 1115, 1126, 1136, 1145, 
	1155, 1165, 1175, 1185, 1194, 1196, 1201, 1205, 
	1220, 1230, 1232, 1241, 1243, 1247, 1249, 1253, 
	1262, 1266, 1281, 1287, 1290, 1292, 1294, 1296, 
	1298, 1310, 1312, 1314, 1316, 1318, 1320, 1322, 
	1324, 1326, 1328, 1330, 1332, 1335, 1337, 1339, 
	1341, 1344, 1346, 1348, 1350, 1352, 1356, 1358, 
	1360, 1362, 1364, 1366, 1368, 1370, 1372, 1374, 
	1376, 1378, 1380, 1382, 1384, 1386, 1389, 1392, 
	1394, 1396, 1407, 1409, 1421, 1423, 1436, 1438, 
	1440, 1442, 1445, 1447, 1449, 1452, 1454, 1456, 
	1458, 1462, 1464, 1466, 1468, 1470, 1472, 1474, 
	1476, 1478, 1481, 1483, 1485, 1487, 1489, 1491, 
	1493, 1495, 1497, 1499, 1501, 1503, 1505, 1507, 
	1509, 1511, 1513, 1515, 1517, 1519, 1521, 1523, 
	1527, 1539, 1552, 1565, 1578, 1586, 1599, 1612, 
	1625, 1638, 1650, 1661, 1674, 1687, 1700, 1713, 
	1726, 1739, 1752, 1765, 1767, 1769, 1771, 1780, 
	1789, 1793, 1803, 1807, 1810, 1815, 1819, 1828, 
	1830, 1834, 1843, 1847, 1862, 1868, 1870, 1872, 
	1874, 1876, 1878, 1880, 1882, 1884, 1886, 1888, 
	1890, 1893, 1895, 1897, 1899, 1901, 1903, 1916, 
	1922, 1931, 1935, 1947, 1952, 1958, 1962, 1966, 
	1976, 1981, 1989, 1996, 2006, 2016, 2026, 2036, 
	2047, 2049, 2061, 2063, 2076, 2078, 2088, 2098, 
	2107, 2119, 2129, 2139, 2149, 2159, 2169, 2179, 
	2189, 2198, 2209, 2219, 2228, 2238, 2248, 2258, 
	2268, 2277, 2279, 2284, 2288, 2303, 2313, 2315, 
	2324, 2326, 2330, 2332, 2336, 2345, 2349, 2364, 
	2370, 2373, 2375, 2377, 2379, 2381, 2393, 2395, 
	2397, 2399, 2401, 2403, 2405, 2407, 2409, 2411, 
	2413, 2415, 2418, 2420, 2422, 2424, 2427, 2429, 
	2431, 2433, 2435, 2439, 2441, 2443, 2445, 2447, 
	2449, 2451, 2453, 2455, 2457, 2459, 2461, 2463, 
	2465, 2467, 2469, 2472, 2475, 2477, 2479, 2490, 
	2492, 2504, 2506, 2519, 2521, 2523, 2525, 2528, 
	2530, 2532, 2535, 2537, 2539, 2541, 2545, 2547, 
	2549, 2551, 2553, 2555, 2557, 2559, 2561, 2564, 
	2566, 2568, 2570, 2572, 2574, 2576, 2578, 2580, 
	2582, 2584, 2586, 2588, 2590, 2592, 2594, 2596, 
	2598, 2600, 2602, 2604, 2609, 2611, 2613, 2615, 
	2617, 2623, 2625, 2627, 2629, 2631, 2633, 2639, 
	2645, 2647, 2662, 2664, 2668, 2670, 2677, 2681, 
	2691, 2696, 2705, 2717, 2721, 2735, 2750, 2765, 
	2780, 2790, 2792, 2794, 2798, 2800, 2802, 2817, 
	2832, 2847, 2862, 2876, 2889, 2904, 2919, 2934, 
	2949, 2964, 2979, 2994, 3009, 3011, 3013, 3015, 
	3017, 3019, 3029, 3038, 3042, 3054, 3064, 3074, 
	3084, 3094, 3104, 3114, 3116, 3118, 3120, 3124, 
	3126, 3128, 3130, 3132, 3134, 3136, 3138, 3140, 
	3142, 3144, 3146, 3148, 3158, 3168, 3170, 3174, 
	3179, 3181, 3183, 3185, 3187, 3192, 3194, 3198, 
	3209, 3215, 3217, 3219, 3221, 3231, 3240, 3244, 
	3256, 3266, 3276, 3286, 3296, 3306, 3316, 3318, 
	3320, 3322, 3326, 3328, 3330, 3332, 3334, 3346, 
	3358, 3370, 3377, 3379, 3381, 3383, 3385, 3387, 
	3389, 3394, 3396, 3400, 3402, 3404, 3419, 3434, 
	3449, 3464, 3479, 3494, 3509, 3524, 3539, 3554, 
	3569, 3584, 3599
]

class << self
	attr_accessor :_selector_indicies
	private :_selector_indicies, :_selector_indicies=
end
self._selector_indicies = [
	1, 1, 1, 1, 1, 0, 2, 3, 
	4, 5, 6, 7, 8, 4, 9, 6, 
	10, 4, 2, 6, 6, 6, 0, 2, 
	3, 11, 4, 5, 12, 7, 8, 4, 
	9, 13, 10, 14, 4, 2, 13, 13, 
	0, 15, 16, 17, 18, 19, 20, 17, 
	21, 22, 14, 17, 15, 0, 4, 3, 
	11, 12, 7, 8, 9, 13, 14, 4, 
	13, 13, 0, 13, 13, 13, 0, 23, 
	24, 25, 26, 13, 27, 28, 25, 29, 
	13, 30, 14, 25, 23, 13, 13, 13, 
	0, 31, 32, 33, 34, 35, 36, 38, 
	37, 39, 31, 37, 37, 0, 40, 41, 
	41, 41, 0, 41, 41, 41, 0, 42, 
	43, 44, 45, 41, 46, 47, 44, 48, 
	41, 49, 44, 42, 41, 41, 41, 0, 
	50, 51, 52, 53, 54, 55, 56, 57, 
	58, 59, 60, 61, 62, 63, 64, 0, 
	65, 53, 66, 0, 67, 0, 68, 0, 
	69, 0, 70, 0, 71, 72, 73, 74, 
	75, 76, 73, 77, 78, 73, 71, 0, 
	9, 79, 80, 81, 82, 9, 81, 81, 
	0, 82, 0, 83, 84, 84, 84, 0, 
	84, 84, 84, 0, 85, 86, 86, 84, 
	87, 88, 86, 84, 86, 86, 85, 84, 
	84, 84, 0, 85, 86, 86, 87, 88, 
	86, 86, 86, 85, 0, 87, 0, 87, 
	89, 90, 91, 92, 87, 92, 92, 0, 
	93, 89, 93, 88, 93, 0, 94, 95, 
	96, 97, 98, 99, 96, 100, 101, 96, 
	94, 0, 0, 103, 102, 104, 13, 13, 
	13, 0, 105, 0, 106, 0, 107, 0, 
	105, 0, 108, 109, 110, 0, 111, 0, 
	112, 0, 113, 0, 114, 0, 115, 0, 
	116, 0, 117, 0, 118, 0, 119, 120, 
	119, 0, 121, 122, 121, 0, 0, 123, 
	122, 124, 125, 126, 126, 126, 0, 15, 
	16, 17, 18, 19, 20, 17, 21, 22, 
	17, 15, 0, 126, 126, 126, 0, 23, 
	24, 25, 26, 126, 27, 28, 25, 29, 
	126, 30, 25, 23, 126, 126, 126, 0, 
	127, 0, 128, 0, 129, 0, 130, 0, 
	131, 132, 133, 135, 136, 134, 137, 138, 
	131, 134, 134, 0, 139, 140, 141, 143, 
	144, 142, 145, 146, 139, 142, 142, 0, 
	140, 147, 148, 140, 148, 148, 0, 148, 
	148, 148, 0, 149, 150, 148, 151, 148, 
	149, 148, 148, 148, 0, 149, 150, 151, 
	149, 0, 150, 139, 152, 153, 154, 150, 
	0, 155, 0, 156, 0, 156, 140, 156, 
	0, 157, 0, 156, 0, 158, 159, 160, 
	161, 162, 163, 165, 164, 166, 167, 158, 
	164, 164, 0, 168, 169, 170, 171, 172, 
	173, 175, 174, 176, 177, 168, 174, 174, 
	0, 178, 178, 178, 178, 178, 0, 179, 
	180, 181, 182, 183, 184, 185, 181, 186, 
	183, 187, 181, 179, 183, 183, 183, 0, 
	179, 180, 188, 181, 182, 189, 184, 185, 
	181, 186, 190, 187, 191, 181, 179, 190, 
	190, 0, 192, 193, 194, 195, 196, 197, 
	194, 198, 199, 191, 194, 192, 0, 181, 
	180, 188, 189, 184, 185, 186, 190, 191, 
	181, 190, 190, 0, 190, 190, 190, 0, 
	200, 201, 202, 203, 190, 204, 205, 202, 
	206, 190, 207, 191, 202, 200, 190, 190, 
	190, 0, 208, 209, 210, 211, 212, 213, 
	215, 214, 216, 208, 214, 214, 0, 217, 
	218, 218, 218, 0, 218, 218, 218, 0, 
	219, 220, 221, 222, 218, 223, 224, 221, 
	225, 218, 226, 221, 219, 218, 218, 218, 
	0, 227, 228, 229, 230, 231, 232, 233, 
	234, 235, 236, 237, 238, 239, 240, 241, 
	0, 242, 230, 243, 0, 244, 0, 245, 
	0, 246, 0, 247, 0, 248, 249, 250, 
	251, 252, 253, 250, 254, 255, 250, 248, 
	0, 186, 256, 257, 258, 259, 186, 258, 
	258, 0, 259, 0, 260, 261, 261, 261, 
	0, 261, 261, 261, 0, 262, 263, 263, 
	261, 264, 265, 263, 261, 263, 263, 262, 
	261, 261, 261, 0, 262, 263, 263, 264, 
	265, 263, 263, 263, 262, 0, 264, 0, 
	264, 266, 267, 268, 269, 264, 269, 269, 
	0, 270, 266, 270, 265, 270, 0, 271, 
	272, 273, 274, 275, 276, 273, 277, 278, 
	273, 271, 0, 0, 280, 279, 281, 282, 
	283, 284, 285, 286, 288, 287, 289, 290, 
	281, 287, 287, 0, 291, 159, 160, 161, 
	162, 163, 165, 164, 166, 167, 291, 164, 
	164, 0, 292, 293, 294, 294, 294, 0, 
	192, 193, 194, 195, 196, 197, 194, 198, 
	199, 194, 192, 0, 294, 294, 294, 0, 
	200, 201, 202, 203, 294, 204, 205, 202, 
	206, 294, 207, 202, 200, 294, 294, 294, 
	0, 270, 267, 269, 269, 269, 0, 270, 
	269, 265, 269, 270, 269, 269, 269, 0, 
	258, 258, 258, 0, 262, 263, 263, 258, 
	264, 265, 263, 258, 295, 263, 262, 258, 
	258, 258, 0, 260, 264, 261, 261, 261, 
	0, 296, 0, 297, 0, 298, 0, 299, 
	0, 247, 0, 300, 0, 301, 0, 302, 
	0, 303, 0, 304, 0, 305, 0, 306, 
	307, 0, 244, 0, 299, 0, 308, 0, 
	309, 0, 310, 0, 310, 311, 312, 313, 
	314, 315, 317, 316, 318, 310, 316, 316, 
	0, 319, 319, 319, 319, 319, 0, 320, 
	321, 319, 319, 320, 319, 319, 319, 0, 
	320, 321, 320, 0, 179, 180, 181, 182, 
	184, 185, 181, 186, 187, 181, 179, 0, 
	320, 321, 318, 320, 0, 320, 322, 319, 
	319, 319, 0, 319, 319, 319, 0, 316, 
	316, 316, 0, 320, 321, 316, 316, 318, 
	320, 316, 316, 316, 0, 322, 319, 319, 
	319, 0, 322, 323, 319, 324, 325, 319, 
	319, 0, 322, 319, 324, 325, 319, 319, 
	0, 320, 321, 319, 319, 326, 320, 319, 
	319, 319, 0, 320, 321, 319, 319, 327, 
	320, 319, 319, 319, 0, 320, 321, 319, 
	319, 328, 320, 319, 319, 319, 0, 320, 
	329, 321, 319, 319, 320, 319, 319, 319, 
	0, 329, 330, 331, 332, 332, 332, 329, 
	333, 332, 332, 0, 332, 330, 332, 330, 
	331, 320, 332, 332, 332, 332, 333, 332, 
	332, 0, 332, 331, 332, 330, 331, 320, 
	332, 332, 334, 332, 332, 333, 332, 332, 
	0, 332, 0, 320, 321, 319, 319, 335, 
	320, 319, 319, 319, 0, 320, 321, 319, 
	319, 336, 320, 319, 319, 319, 0, 320, 
	321, 337, 319, 320, 319, 319, 319, 0, 
	320, 321, 319, 319, 338, 339, 340, 320, 
	319, 319, 319, 0, 320, 321, 319, 319, 
	341, 320, 319, 319, 319, 0, 320, 321, 
	319, 319, 342, 320, 319, 319, 319, 0, 
	320, 321, 319, 319, 343, 320, 319, 319, 
	319, 0, 320, 321, 319, 319, 328, 320, 
	319, 319, 319, 0, 320, 321, 319, 319, 
	344, 320, 319, 319, 319, 0, 320, 321, 
	319, 319, 345, 320, 319, 319, 319, 0, 
	320, 321, 319, 319, 346, 320, 319, 319, 
	319, 0, 320, 321, 347, 319, 320, 319, 
	319, 319, 0, 320, 321, 319, 319, 338, 
	340, 320, 319, 319, 319, 0, 320, 321, 
	319, 319, 348, 320, 319, 319, 319, 0, 
	320, 321, 349, 319, 320, 319, 319, 319, 
	0, 320, 321, 319, 319, 350, 320, 319, 
	319, 319, 0, 320, 321, 319, 319, 351, 
	320, 319, 319, 319, 0, 320, 321, 319, 
	319, 352, 320, 319, 319, 319, 0, 320, 
	321, 319, 319, 328, 320, 319, 319, 319, 
	0, 317, 353, 354, 355, 356, 317, 355, 
	355, 0, 356, 0, 357, 358, 358, 358, 
	0, 358, 358, 358, 0, 359, 360, 360, 
	358, 361, 320, 360, 358, 360, 360, 359, 
	358, 358, 358, 0, 359, 360, 360, 361, 
	320, 360, 360, 360, 359, 0, 361, 0, 
	361, 362, 363, 364, 365, 361, 365, 365, 
	0, 366, 362, 366, 320, 366, 0, 366, 
	363, 365, 365, 365, 0, 366, 365, 320, 
	365, 366, 365, 365, 365, 0, 355, 355, 
	355, 0, 359, 360, 360, 355, 361, 320, 
	360, 355, 367, 360, 359, 355, 355, 355, 
	0, 357, 361, 358, 358, 358, 0, 368, 
	244, 0, 369, 0, 370, 0, 371, 0, 
	372, 0, 373, 374, 375, 376, 377, 378, 
	375, 379, 380, 375, 373, 0, 381, 0, 
	382, 0, 383, 0, 384, 0, 385, 0, 
	372, 0, 386, 0, 387, 0, 388, 0, 
	389, 0, 384, 0, 390, 387, 0, 391, 
	0, 392, 0, 372, 0, 393, 394, 0, 
	395, 0, 396, 0, 397, 0, 398, 0, 
	399, 305, 400, 0, 401, 0, 402, 0, 
	385, 0, 403, 0, 404, 0, 405, 0, 
	406, 0, 371, 0, 407, 0, 408, 0, 
	372, 0, 409, 0, 410, 0, 411, 0, 
	372, 0, 412, 413, 0, 414, 415, 0, 
	416, 0, 417, 0, 417, 418, 419, 420, 
	420, 420, 417, 421, 420, 420, 0, 420, 
	418, 420, 418, 419, 372, 420, 420, 420, 
	420, 421, 420, 420, 0, 420, 419, 420, 
	418, 419, 372, 420, 420, 422, 420, 420, 
	421, 420, 420, 0, 420, 0, 423, 0, 
	424, 0, 399, 400, 0, 425, 0, 372, 
	0, 426, 427, 0, 309, 0, 428, 0, 
	429, 0, 430, 431, 432, 0, 433, 0, 
	434, 0, 435, 0, 416, 0, 436, 0, 
	437, 0, 438, 0, 439, 0, 430, 432, 
	0, 440, 0, 441, 0, 442, 0, 443, 
	0, 444, 0, 416, 0, 445, 0, 446, 
	0, 423, 0, 447, 0, 448, 0, 372, 
	0, 449, 0, 450, 0, 451, 0, 448, 
	0, 452, 0, 453, 0, 454, 0, 384, 
	0, 150, 151, 142, 142, 142, 0, 150, 
	139, 142, 455, 142, 456, 154, 150, 142, 
	142, 142, 0, 150, 139, 142, 455, 457, 
	142, 456, 154, 150, 142, 142, 142, 0, 
	150, 139, 142, 455, 458, 142, 456, 154, 
	150, 142, 142, 142, 0, 459, 140, 139, 
	142, 455, 142, 456, 154, 459, 142, 142, 
	142, 0, 459, 140, 139, 152, 153, 154, 
	459, 0, 150, 139, 142, 455, 142, 456, 
	460, 154, 150, 142, 142, 142, 0, 150, 
	139, 142, 455, 142, 456, 458, 154, 150, 
	142, 142, 142, 0, 150, 139, 142, 455, 
	461, 142, 456, 154, 150, 142, 142, 142, 
	0, 150, 139, 142, 455, 462, 142, 456, 
	154, 150, 142, 142, 142, 0, 463, 139, 
	142, 455, 142, 456, 154, 463, 142, 142, 
	142, 0, 463, 139, 141, 455, 142, 456, 
	154, 463, 142, 142, 0, 150, 139, 142, 
	455, 464, 142, 456, 154, 150, 142, 142, 
	142, 0, 150, 139, 142, 455, 465, 142, 
	456, 154, 150, 142, 142, 142, 0, 150, 
	139, 142, 455, 462, 142, 456, 154, 150, 
	142, 142, 142, 0, 150, 139, 142, 455, 
	142, 456, 466, 154, 150, 142, 142, 142, 
	0, 150, 139, 142, 455, 142, 456, 462, 
	154, 150, 142, 142, 142, 0, 150, 139, 
	142, 455, 142, 456, 467, 154, 150, 142, 
	142, 142, 0, 150, 139, 142, 455, 142, 
	456, 468, 154, 150, 142, 142, 142, 0, 
	150, 139, 142, 455, 142, 456, 462, 154, 
	150, 142, 142, 142, 0, 469, 0, 470, 
	0, 471, 0, 472, 473, 474, 475, 476, 
	472, 475, 475, 0, 477, 478, 479, 480, 
	481, 477, 480, 480, 0, 480, 480, 480, 
	0, 482, 480, 479, 480, 481, 482, 480, 
	480, 480, 0, 482, 481, 482, 0, 0, 
	483, 481, 484, 485, 485, 485, 0, 485, 
	485, 485, 0, 482, 485, 485, 481, 482, 
	485, 485, 485, 0, 93, 90, 92, 92, 
	92, 0, 93, 92, 88, 92, 93, 92, 
	92, 92, 0, 81, 81, 81, 0, 85, 
	86, 86, 81, 87, 88, 86, 81, 486, 
	86, 85, 81, 81, 81, 0, 83, 87, 
	84, 84, 84, 0, 487, 0, 488, 0, 
	489, 0, 490, 0, 70, 0, 491, 0, 
	492, 0, 493, 0, 494, 0, 495, 0, 
	496, 0, 497, 498, 0, 67, 0, 490, 
	0, 499, 0, 500, 0, 501, 0, 501, 
	502, 503, 504, 505, 506, 508, 507, 509, 
	501, 507, 507, 0, 510, 510, 510, 510, 
	510, 0, 511, 512, 510, 510, 511, 510, 
	510, 510, 0, 511, 512, 511, 0, 2, 
	3, 4, 5, 7, 8, 4, 9, 10, 
	4, 2, 0, 511, 512, 509, 511, 0, 
	511, 513, 510, 510, 510, 0, 510, 510, 
	510, 0, 507, 507, 507, 0, 511, 512, 
	507, 507, 509, 511, 507, 507, 507, 0, 
	513, 510, 510, 510, 0, 513, 514, 510, 
	515, 516, 510, 510, 0, 513, 510, 515, 
	516, 510, 510, 0, 511, 512, 510, 510, 
	517, 511, 510, 510, 510, 0, 511, 512, 
	510, 510, 518, 511, 510, 510, 510, 0, 
	511, 512, 510, 510, 519, 511, 510, 510, 
	510, 0, 511, 520, 512, 510, 510, 511, 
	510, 510, 510, 0, 520, 521, 522, 523, 
	523, 523, 520, 524, 523, 523, 0, 523, 
	521, 523, 521, 522, 511, 523, 523, 523, 
	523, 524, 523, 523, 0, 523, 522, 523, 
	521, 522, 511, 523, 523, 525, 523, 523, 
	524, 523, 523, 0, 523, 0, 511, 512, 
	510, 510, 526, 511, 510, 510, 510, 0, 
	511, 512, 510, 510, 527, 511, 510, 510, 
	510, 0, 511, 512, 528, 510, 511, 510, 
	510, 510, 0, 511, 512, 510, 510, 529, 
	530, 531, 511, 510, 510, 510, 0, 511, 
	512, 510, 510, 532, 511, 510, 510, 510, 
	0, 511, 512, 510, 510, 533, 511, 510, 
	510, 510, 0, 511, 512, 510, 510, 534, 
	511, 510, 510, 510, 0, 511, 512, 510, 
	510, 519, 511, 510, 510, 510, 0, 511, 
	512, 510, 510, 535, 511, 510, 510, 510, 
	0, 511, 512, 510, 510, 536, 511, 510, 
	510, 510, 0, 511, 512, 510, 510, 537, 
	511, 510, 510, 510, 0, 511, 512, 538, 
	510, 511, 510, 510, 510, 0, 511, 512, 
	510, 510, 529, 531, 511, 510, 510, 510, 
	0, 511, 512, 510, 510, 539, 511, 510, 
	510, 510, 0, 511, 512, 540, 510, 511, 
	510, 510, 510, 0, 511, 512, 510, 510, 
	541, 511, 510, 510, 510, 0, 511, 512, 
	510, 510, 542, 511, 510, 510, 510, 0, 
	511, 512, 510, 510, 543, 511, 510, 510, 
	510, 0, 511, 512, 510, 510, 519, 511, 
	510, 510, 510, 0, 508, 544, 545, 546, 
	547, 508, 546, 546, 0, 547, 0, 548, 
	549, 549, 549, 0, 549, 549, 549, 0, 
	550, 551, 551, 549, 552, 511, 551, 549, 
	551, 551, 550, 549, 549, 549, 0, 550, 
	551, 551, 552, 511, 551, 551, 551, 550, 
	0, 552, 0, 552, 553, 554, 555, 556, 
	552, 556, 556, 0, 557, 553, 557, 511, 
	557, 0, 557, 554, 556, 556, 556, 0, 
	557, 556, 511, 556, 557, 556, 556, 556, 
	0, 546, 546, 546, 0, 550, 551, 551, 
	546, 552, 511, 551, 546, 558, 551, 550, 
	546, 546, 546, 0, 548, 552, 549, 549, 
	549, 0, 559, 67, 0, 560, 0, 561, 
	0, 562, 0, 563, 0, 564, 565, 566, 
	567, 568, 569, 566, 570, 571, 566, 564, 
	0, 572, 0, 573, 0, 574, 0, 575, 
	0, 576, 0, 563, 0, 577, 0, 578, 
	0, 579, 0, 580, 0, 575, 0, 581, 
	578, 0, 582, 0, 583, 0, 563, 0, 
	584, 585, 0, 586, 0, 587, 0, 588, 
	0, 589, 0, 590, 496, 591, 0, 592, 
	0, 593, 0, 576, 0, 594, 0, 595, 
	0, 596, 0, 597, 0, 562, 0, 598, 
	0, 599, 0, 563, 0, 600, 0, 601, 
	0, 602, 0, 563, 0, 603, 604, 0, 
	605, 606, 0, 607, 0, 608, 0, 608, 
	609, 610, 611, 611, 611, 608, 612, 611, 
	611, 0, 611, 609, 611, 609, 610, 563, 
	611, 611, 611, 611, 612, 611, 611, 0, 
	611, 610, 611, 609, 610, 563, 611, 611, 
	613, 611, 611, 612, 611, 611, 0, 611, 
	0, 614, 0, 615, 0, 590, 591, 0, 
	616, 0, 563, 0, 617, 618, 0, 500, 
	0, 619, 0, 620, 0, 621, 622, 623, 
	0, 624, 0, 625, 0, 626, 0, 607, 
	0, 627, 0, 628, 0, 629, 0, 630, 
	0, 621, 623, 0, 631, 0, 632, 0, 
	633, 0, 634, 0, 635, 0, 607, 0, 
	636, 0, 637, 0, 614, 0, 638, 0, 
	639, 0, 563, 0, 640, 0, 641, 0, 
	642, 0, 639, 0, 643, 0, 644, 0, 
	645, 0, 575, 0, 646, 13, 13, 13, 
	0, 647, 0, 648, 0, 649, 0, 647, 
	0, 108, 650, 109, 651, 110, 0, 652, 
	0, 653, 0, 654, 0, 655, 0, 656, 
	0, 657, 658, 659, 660, 657, 0, 661, 
	662, 663, 664, 661, 0, 665, 662, 665, 
	666, 667, 668, 669, 670, 672, 673, 671, 
	674, 675, 665, 671, 671, 0, 676, 666, 
	676, 670, 676, 0, 676, 667, 668, 677, 
	678, 668, 678, 678, 0, 678, 678, 678, 
	0, 679, 680, 678, 681, 678, 679, 678, 
	678, 678, 0, 679, 680, 681, 679, 0, 
	680, 666, 667, 682, 670, 683, 684, 680, 
	0, 682, 668, 669, 672, 673, 671, 674, 
	675, 682, 671, 671, 0, 671, 671, 671, 
	0, 680, 666, 667, 682, 671, 670, 685, 
	671, 686, 680, 671, 671, 671, 0, 680, 
	666, 667, 682, 671, 670, 685, 687, 671, 
	686, 680, 671, 671, 671, 0, 680, 666, 
	667, 682, 671, 670, 685, 688, 671, 686, 
	680, 671, 671, 671, 0, 689, 666, 667, 
	668, 682, 671, 670, 685, 671, 686, 689, 
	671, 671, 671, 0, 689, 666, 667, 668, 
	682, 670, 683, 684, 689, 0, 690, 0, 
	691, 0, 691, 668, 691, 0, 692, 0, 
	691, 0, 680, 666, 667, 682, 671, 670, 
	685, 671, 686, 693, 680, 671, 671, 671, 
	0, 680, 666, 667, 682, 671, 670, 685, 
	671, 686, 688, 680, 671, 671, 671, 0, 
	680, 666, 667, 682, 671, 670, 685, 694, 
	671, 686, 680, 671, 671, 671, 0, 680, 
	666, 667, 682, 671, 670, 685, 695, 671, 
	686, 680, 671, 671, 671, 0, 696, 666, 
	667, 682, 671, 670, 685, 671, 686, 696, 
	671, 671, 671, 0, 696, 666, 667, 682, 
	669, 670, 685, 671, 686, 696, 671, 671, 
	0, 680, 666, 667, 682, 671, 670, 685, 
	697, 671, 686, 680, 671, 671, 671, 0, 
	680, 666, 667, 682, 671, 670, 685, 698, 
	671, 686, 680, 671, 671, 671, 0, 680, 
	666, 667, 682, 671, 670, 685, 695, 671, 
	686, 680, 671, 671, 671, 0, 680, 666, 
	667, 682, 671, 670, 685, 671, 686, 699, 
	680, 671, 671, 671, 0, 680, 666, 667, 
	682, 671, 670, 685, 671, 686, 695, 680, 
	671, 671, 671, 0, 680, 666, 667, 682, 
	671, 670, 685, 671, 686, 700, 680, 671, 
	671, 671, 0, 680, 666, 667, 682, 671, 
	670, 685, 671, 686, 701, 680, 671, 671, 
	671, 0, 680, 666, 667, 682, 671, 670, 
	685, 671, 686, 695, 680, 671, 671, 671, 
	0, 680, 681, 665, 663, 702, 0, 703, 
	0, 704, 0, 704, 706, 707, 0, 665, 
	708, 0, 704, 0, 705, 709, 0, 665, 
	708, 0, 709, 0, 0, 705, 709, 665, 
	709, 0, 709, 0, 665, 708, 0, 709, 
	0, 0, 710, 710, 710, 705, 709, 0, 
	665, 708, 711, 0, 709, 0, 0, 705, 
	709, 0, 665, 712, 708, 0, 709, 0, 
	0, 705, 709, 0, 665, 713, 708, 0, 
	709, 0, 0, 705, 709, 0, 665, 714, 
	708, 0, 709, 0, 0, 705, 709, 0, 
	665, 708, 715, 0, 709, 0, 0, 705, 
	709, 0, 0, 716, 665, 708, 0, 709, 
	0, 705, 717, 0, 718, 0, 719, 0, 
	720, 720, 720, 0, 721, 0, 705, 0, 
	709, 706, 709, 707, 722, 0, 723, 0, 
	724, 0, 725, 0, 726, 0, 727, 0, 
	728, 0, 729, 0, 730, 731, 732, 733, 
	734, 735, 730, 734, 734, 0, 736, 737, 
	738, 739, 740, 741, 736, 740, 740, 0, 
	742, 737, 742, 743, 742, 0, 744, 13, 
	13, 13, 0, 745, 0, 746, 0, 747, 
	0, 745, 0, 108, 109, 651, 110, 0, 
	742, 738, 740, 740, 740, 0, 748, 737, 
	738, 740, 740, 741, 748, 740, 740, 740, 
	0, 748, 737, 738, 749, 748, 0, 750, 
	0, 751, 0, 752, 0, 752, 754, 755, 
	0, 742, 756, 0, 752, 0, 753, 757, 
	0, 742, 756, 0, 757, 0, 0, 753, 
	757, 742, 757, 0, 757, 0, 742, 756, 
	0, 757, 0, 0, 758, 758, 758, 753, 
	757, 0, 742, 756, 759, 0, 757, 0, 
	0, 753, 757, 0, 742, 760, 756, 0, 
	757, 0, 0, 753, 757, 0, 742, 761, 
	756, 0, 757, 0, 0, 753, 757, 0, 
	742, 762, 756, 0, 757, 0, 0, 753, 
	757, 0, 742, 756, 763, 0, 757, 0, 
	0, 753, 757, 0, 0, 764, 742, 756, 
	0, 757, 0, 753, 765, 0, 766, 0, 
	767, 0, 768, 768, 768, 0, 769, 0, 
	753, 0, 757, 754, 757, 755, 748, 737, 
	738, 740, 740, 770, 741, 748, 740, 740, 
	740, 0, 748, 737, 738, 740, 740, 771, 
	741, 748, 740, 740, 740, 0, 748, 737, 
	738, 752, 740, 740, 741, 748, 740, 740, 
	740, 0, 772, 108, 650, 109, 651, 110, 
	0, 773, 0, 774, 0, 775, 0, 776, 
	0, 777, 0, 778, 0, 778, 779, 780, 
	778, 0, 781, 779, 781, 647, 781, 0, 
	781, 780, 783, 782, 647, 784, 785, 786, 
	787, 788, 789, 790, 792, 791, 793, 647, 
	791, 791, 0, 647, 784, 785, 786, 787, 
	788, 789, 794, 792, 791, 793, 647, 791, 
	791, 0, 795, 796, 797, 798, 799, 800, 
	801, 802, 804, 803, 805, 795, 803, 803, 
	0, 806, 807, 808, 809, 810, 811, 812, 
	813, 815, 814, 816, 806, 814, 814, 0, 
	105, 784, 785, 817, 787, 788, 818, 819, 
	792, 791, 793, 105, 791, 791, 0, 820, 
	821, 822, 823, 824, 825, 826, 827, 829, 
	828, 830, 820, 828, 828, 0, 831, 832, 
	833, 834, 835, 836, 837, 838, 840, 839, 
	841, 831, 839, 839, 0, 842, 843, 844, 
	845, 846, 847, 848, 849, 851, 850, 852, 
	842, 850, 850, 0, 853, 854, 855, 856, 
	857, 858, 859, 860, 862, 861, 863, 853, 
	861, 861, 0, 864, 807, 808, 865, 810, 
	811, 866, 867, 815, 814, 816, 864, 814, 
	814, 0, 868, 869, 870, 871, 872, 873, 
	874, 875, 877, 876, 878, 868, 876, 876, 
	0, 879, 807, 808, 880, 810, 811, 881, 
	882, 815, 814, 816, 879, 814, 814, 0, 
	745, 784, 785, 883, 787, 788, 884, 885, 
	792, 791, 793, 745, 791, 791, 0, 783, 
	783, 886, 0
]

class << self
	attr_accessor :_selector_trans_targs
	private :_selector_trans_targs, :_selector_trans_targs=
end
self._selector_trans_targs = [
	0, 2, 3, 1, 5, 8, 2, 9, 
	12, 19, 30, 4, 6, 7, 48, 3, 
	1, 5, 8, 9, 12, 19, 30, 3, 
	1, 5, 8, 9, 12, 19, 30, 8, 
	1, 4, 6, 9, 12, 7, 19, 48, 
	10, 11, 3, 1, 5, 8, 9, 12, 
	19, 30, 13, 331, 392, 317, 398, 404, 
	409, 413, 430, 434, 449, 469, 472, 475, 
	479, 14, 322, 15, 16, 17, 18, 3, 
	1, 5, 8, 9, 12, 19, 30, 20, 
	314, 315, 21, 22, 23, 24, 25, 26, 
	29, 27, 311, 312, 313, 28, 3, 1, 
	5, 8, 9, 12, 19, 30, 30, 615, 
	32, 617, 34, 35, 37, 52, 299, 38, 
	39, 40, 41, 42, 43, 44, 45, 46, 
	47, 46, 47, 618, 49, 50, 51, 53, 
	54, 55, 56, 57, 58, 279, 280, 287, 
	291, 294, 296, 57, 58, 279, 280, 287, 
	291, 294, 296, 59, 60, 61, 62, 278, 
	63, 66, 68, 64, 65, 67, 69, 70, 
	73, 75, 78, 81, 76, 88, 102, 619, 
	69, 70, 73, 75, 78, 81, 76, 88, 
	102, 619, 71, 72, 70, 74, 77, 71, 
	78, 81, 88, 99, 73, 75, 76, 102, 
	72, 70, 74, 77, 78, 81, 88, 99, 
	72, 70, 74, 77, 78, 81, 88, 99, 
	77, 70, 73, 75, 78, 81, 76, 88, 
	102, 79, 80, 72, 70, 74, 77, 78, 
	81, 88, 99, 82, 126, 187, 112, 193, 
	199, 204, 208, 225, 229, 244, 264, 267, 
	270, 274, 83, 117, 84, 85, 86, 87, 
	72, 70, 74, 77, 78, 81, 88, 99, 
	89, 109, 110, 90, 91, 92, 93, 94, 
	95, 98, 96, 106, 107, 108, 97, 72, 
	70, 74, 77, 78, 81, 88, 99, 99, 
	100, 101, 70, 73, 75, 78, 81, 76, 
	88, 102, 619, 101, 103, 104, 105, 111, 
	113, 114, 115, 116, 118, 119, 120, 121, 
	122, 123, 124, 125, 127, 128, 129, 130, 
	134, 137, 139, 140, 138, 171, 135, 131, 
	132, 133, 136, 141, 142, 152, 143, 144, 
	145, 146, 147, 149, 148, 150, 151, 153, 
	154, 155, 156, 160, 165, 157, 158, 159, 
	161, 162, 163, 164, 166, 167, 168, 169, 
	170, 172, 184, 185, 173, 174, 175, 176, 
	177, 178, 179, 181, 182, 183, 180, 186, 
	188, 189, 190, 191, 192, 72, 70, 74, 
	77, 78, 81, 88, 99, 194, 195, 196, 
	197, 198, 200, 201, 202, 203, 205, 206, 
	207, 209, 222, 210, 211, 212, 213, 214, 
	217, 215, 216, 218, 219, 220, 221, 223, 
	224, 226, 227, 228, 230, 242, 231, 239, 
	232, 233, 234, 236, 235, 237, 238, 240, 
	241, 243, 245, 246, 247, 248, 249, 253, 
	258, 250, 251, 252, 254, 255, 256, 257, 
	259, 260, 261, 262, 263, 265, 266, 268, 
	269, 271, 272, 273, 275, 276, 277, 281, 
	285, 282, 283, 284, 286, 288, 289, 290, 
	292, 293, 295, 297, 298, 300, 301, 302, 
	303, 304, 308, 305, 307, 303, 304, 308, 
	305, 307, 306, 620, 309, 310, 316, 318, 
	319, 320, 321, 323, 324, 325, 326, 327, 
	328, 329, 330, 332, 333, 334, 335, 339, 
	342, 344, 345, 343, 376, 340, 336, 337, 
	338, 341, 346, 347, 357, 348, 349, 350, 
	351, 352, 354, 353, 355, 356, 358, 359, 
	360, 361, 365, 370, 362, 363, 364, 366, 
	367, 368, 369, 371, 372, 373, 374, 375, 
	377, 389, 390, 378, 379, 380, 381, 382, 
	383, 384, 386, 387, 388, 385, 391, 393, 
	394, 395, 396, 397, 3, 1, 5, 8, 
	9, 12, 19, 30, 399, 400, 401, 402, 
	403, 405, 406, 407, 408, 410, 411, 412, 
	414, 427, 415, 416, 417, 418, 419, 422, 
	420, 421, 423, 424, 425, 426, 428, 429, 
	431, 432, 433, 435, 447, 436, 444, 437, 
	438, 439, 441, 440, 442, 443, 445, 446, 
	448, 450, 451, 452, 453, 454, 458, 463, 
	455, 456, 457, 459, 460, 461, 462, 464, 
	465, 466, 467, 468, 470, 471, 473, 474, 
	476, 477, 478, 480, 481, 482, 484, 614, 
	486, 487, 489, 555, 490, 491, 492, 493, 
	494, 495, 496, 533, 534, 495, 496, 533, 
	534, 497, 498, 500, 501, 507, 621, 508, 
	520, 524, 527, 529, 499, 502, 503, 504, 
	505, 532, 506, 513, 516, 509, 518, 510, 
	511, 512, 514, 515, 517, 519, 521, 522, 
	523, 525, 526, 528, 530, 531, 535, 536, 
	537, 538, 553, 554, 540, 539, 541, 542, 
	543, 544, 545, 546, 547, 548, 549, 550, 
	551, 552, 556, 557, 558, 559, 560, 561, 
	562, 563, 564, 565, 573, 574, 575, 598, 
	564, 565, 573, 574, 575, 598, 566, 623, 
	568, 625, 570, 571, 576, 577, 578, 579, 
	580, 581, 596, 597, 583, 582, 584, 585, 
	586, 587, 588, 589, 590, 591, 592, 593, 
	594, 595, 599, 600, 602, 603, 604, 605, 
	606, 607, 608, 609, 611, 610, 612, 626, 
	1, 4, 483, 9, 12, 485, 601, 7, 
	19, 48, 488, 616, 1, 4, 31, 9, 
	12, 33, 36, 7, 19, 48, 616, 1, 
	4, 31, 9, 12, 33, 36, 7, 19, 
	48, 31, 33, 36, 616, 1, 4, 31, 
	9, 12, 33, 36, 7, 19, 48, 616, 
	1, 4, 31, 9, 12, 33, 36, 7, 
	19, 48, 616, 1, 4, 31, 9, 12, 
	33, 36, 7, 19, 48, 622, 1, 4, 
	483, 9, 12, 485, 488, 7, 19, 48, 
	622, 483, 485, 488, 624, 1, 4, 567, 
	9, 12, 569, 572, 7, 19, 48, 624, 
	567, 569, 572, 567, 569, 572, 0
]

class << self
	attr_accessor :_selector_trans_actions
	private :_selector_trans_actions, :_selector_trans_actions=
end
self._selector_trans_actions = [
	35, 13, 0, 0, 0, 25, 0, 0, 
	0, 0, 25, 0, 0, 0, 0, 1, 
	1, 1, 39, 1, 1, 1, 39, 3, 
	3, 3, 42, 3, 3, 3, 42, 0, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	0, 0, 11, 11, 11, 54, 11, 11, 
	11, 54, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 7, 
	7, 7, 48, 7, 7, 7, 48, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 9, 9, 
	9, 51, 9, 9, 9, 51, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 29, 
	29, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 21, 21, 21, 21, 21, 
	21, 21, 21, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 19, 85, 
	85, 85, 85, 85, 85, 85, 85, 19, 
	0, 63, 63, 63, 63, 63, 63, 63, 
	63, 0, 13, 0, 0, 0, 25, 0, 
	0, 0, 0, 25, 0, 0, 0, 0, 
	1, 1, 1, 39, 1, 1, 1, 39, 
	3, 3, 3, 42, 3, 3, 3, 42, 
	0, 23, 23, 23, 23, 23, 23, 23, 
	23, 0, 0, 11, 11, 11, 54, 11, 
	11, 11, 54, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	7, 7, 7, 48, 7, 7, 7, 48, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 9, 
	9, 9, 51, 9, 9, 9, 51, 0, 
	0, 17, 109, 109, 109, 109, 109, 109, 
	109, 109, 57, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 5, 5, 5, 
	45, 5, 5, 5, 45, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	31, 31, 31, 31, 31, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 5, 5, 5, 45, 
	5, 5, 5, 45, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 27, 27, 27, 27, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 33, 33, 33, 33, 33, 33, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 37, 
	63, 63, 63, 63, 63, 0, 0, 63, 
	63, 63, 0, 57, 109, 109, 109, 109, 
	109, 57, 57, 109, 109, 109, 19, 85, 
	85, 85, 85, 85, 19, 19, 85, 85, 
	85, 63, 0, 0, 72, 124, 124, 124, 
	124, 124, 72, 72, 124, 124, 124, 66, 
	114, 114, 114, 114, 114, 66, 66, 114, 
	114, 114, 75, 129, 129, 129, 129, 129, 
	75, 75, 129, 129, 129, 69, 119, 119, 
	119, 119, 119, 69, 69, 119, 119, 119, 
	19, 85, 19, 19, 78, 134, 134, 134, 
	134, 134, 78, 78, 134, 134, 134, 19, 
	85, 19, 19, 63, 0, 0, 0
]

class << self
	attr_accessor :_selector_eof_actions
	private :_selector_eof_actions, :_selector_eof_actions=
end
self._selector_eof_actions = [
	0, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 0, 15, 15, 81, 
	60, 15, 97, 89, 101, 93, 60, 105, 
	60, 15, 0
]

class << self
	attr_accessor :selector_start
end
self.selector_start = 613;
class << self
	attr_accessor :selector_first_final
end
self.selector_first_final = 613;
class << self
	attr_accessor :selector_error
end
self.selector_error = 0;

class << self
	attr_accessor :selector_en_resume
end
self.selector_en_resume = 612;
class << self
	attr_accessor :selector_en_main
end
self.selector_en_main = 613;


# line 26 "parse.rl"

   end
    
    def run(args)
      return "no input" unless args[:code] 
      
       # input as array "data" will be consumed by Ragel parser exec code

       # replaces CSS comments
       # http://www.w3.org/TR/css3-syntax/#tokenization
       # COMMENT 	::= 	"/*" [^*]* '*'+ ([^/] [^*]* '*'+)* "/"

      data = args[:code].gsub(/\/\*[^*]*\*+([^\/][^*]*\*+)*\//,'').unpack("c*")

      # Ragel writes initialization code, like
      # begin
      #	p ||= 0
      #	pe ||= data.length
      #	cs = selector_start
      #end
      
# line 1698 "generated/parse.rb"
begin
	p ||= 0
	pe ||= data.length
	cs = selector_start
end

# line 47 "parse.rl"

      # More initialization:
      # saves the last correct position
      p_correct = 0;
      # set eof = pe to trigger Ragel EOF actions
      eof = pe;
      #count parse errors
      errors = 0;
      # to access EOF and be able to point after it, add an array element.
      data << 0; 


      #count selector specificity in the rulesets
      spec = Specificity.new;
      #count imported stylesheets
      imports = Counter.new;
      media = Counter.new;

      puts "\n\nRunning the state machine ...";

      # Ragel writes parser execution code
      
# line 1728 "generated/parse.rb"
begin
	_klen, _trans, _keys, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	_trigger_goto = false
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = _selector_key_offsets[cs]
	_trans = _selector_index_offsets[cs]
	_klen = _selector_single_lengths[cs]
	_break_match = false
	
	begin
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + _klen - 1

	     loop do
	        break if _upper < _lower
	        _mid = _lower + ( (_upper - _lower) >> 1 )

	        if data[p] < _selector_trans_keys[_mid]
	           _upper = _mid - 1
	        elsif data[p] > _selector_trans_keys[_mid]
	           _lower = _mid + 1
	        else
	           _trans += (_mid - _keys)
	           _break_match = true
	           break
	        end
	     end # loop
	     break if _break_match
	     _keys += _klen
	     _trans += _klen
	  end
	  _klen = _selector_range_lengths[cs]
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + (_klen << 1) - 2
	     loop do
	        break if _upper < _lower
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1)
	        if data[p] < _selector_trans_keys[_mid]
	          _upper = _mid - 2
	        elsif data[p] > _selector_trans_keys[_mid+1]
	          _lower = _mid + 2
	        else
	          _trans += ((_mid - _keys) >> 1)
	          _break_match = true
	          break
	        end
	     end # loop
	     break if _break_match
	     _trans += _klen
	  end
	end while false
	_trans = _selector_indicies[_trans]
	cs = _selector_trans_targs[_trans]
	if _selector_trans_actions[_trans] != 0
		_acts = _selector_trans_actions[_trans]
		_nacts = _selector_actions[_acts]
		_acts += 1
		while _nacts > 0
			_nacts -= 1
			_acts += 1
			case _selector_actions[_acts - 1]
when 0 then
# line 4 "includes/actions.rl"
		begin

        print " Universal";
    		end
when 1 then
# line 8 "includes/actions.rl"
		begin

        print " Type";
        spec.add('c');
    		end
when 2 then
# line 13 "includes/actions.rl"
		begin

        print " Pseudo-Class";
        spec.add('b');
    		end
when 3 then
# line 17 "includes/actions.rl"
		begin

        print " Pseudo-Element";
        spec.add('c');
    		end
when 4 then
# line 21 "includes/actions.rl"
		begin

        print " Attribute";
        spec.add('b');
    		end
when 5 then
# line 26 "includes/actions.rl"
		begin
 
        print " Class";
        spec.add('b');
    		end
when 6 then
# line 31 "includes/actions.rl"
		begin
 
        print " ID";
        spec.add('a');
    		end
when 8 then
# line 43 "includes/actions.rl"
		begin

      puts "\n  end ruleset \"#{data.slice(p_correct, p-p_correct).pack("c*")}\"";
      spec.add_ruleset;
    		end
when 9 then
# line 48 "includes/actions.rl"
		begin

      p_correct = p;
    		end
when 10 then
# line 52 "includes/actions.rl"
		begin

      print "\n  begin ruleset"
    		end
when 11 then
# line 57 "includes/actions.rl"
		begin

      print "\n begin media"
    		end
when 12 then
# line 60 "includes/actions.rl"
		begin

      puts " end media";
      media.add;
    		end
when 13 then
# line 66 "includes/actions.rl"
		begin

      print "\n    selector = {";
    		end
when 14 then
# line 70 "includes/actions.rl"
		begin

      print " }";
      spec.selector_next;
      spec.selector_out;
      spec.selector_reset;
    		end
when 15 then
# line 77 "includes/actions.rl"
		begin

       puts "\n begin import";
    		end
when 16 then
# line 81 "includes/actions.rl"
		begin

      imports.add();
      puts " end import";
    		end
when 17 then
# line 86 "includes/actions.rl"
		begin

       puts "\n begin font-face";
    		end
when 18 then
# line 89 "includes/actions.rl"
		begin

      puts " end font-face";
    		end
when 19 then
# line 93 "includes/actions.rl"
		begin

       puts "\n  begin page";
    		end
when 20 then
# line 96 "includes/actions.rl"
		begin

      puts "  end page";
    		end
when 21 then
# line 99 "includes/actions.rl"
		begin

       puts "\n begin namespace";
    		end
when 22 then
# line 102 "includes/actions.rl"
		begin

      puts " end namespace";
    		end
when 23 then
# line 107 "includes/actions.rl"
		begin

      errors = errors + 1;
      
      @tmperr = "\nParse error \##{errors}\n"
      @tmperr << data.slice(p_correct, 1+p-p_correct).pack("c*");
      @tmperr <<  "◀";
      if (p+25 < pe)
          @tmperr << data.slice(p+1, 25).pack("c*");
          @tmperr << "...\nResumed.\n";
      else
          @tmperr << data.slice(p+1, pe-p).pack("c*");
          @tmperr << "<End of File>"
      end
      print @tmperr
      @errors_list << (errors.to_s() + @tmperr)
      p = p - 1;
      	begin
		cs = 612
		_trigger_goto = true
		_goto_level = _again
		break
	end

    		end
when 24 then
# line 125 "includes/grammar.rl"
		begin
p_correct = p; 	begin
		cs = 613
		_trigger_goto = true
		_goto_level = _again
		break
	end
		end
# line 1990 "generated/parse.rb"
			end # action switch
		end
	end
	if _trigger_goto
		next
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	__acts = _selector_eof_actions[cs]
	__nacts =  _selector_actions[__acts]
	__acts += 1
	while __nacts > 0
		__nacts -= 1
		__acts += 1
		case _selector_actions[__acts - 1]
when 7 then
# line 36 "includes/actions.rl"
		begin

      puts "\nFile: #{args[:file]}"
      spec.out();
      args[:notes] << media.note(" media queries may contain some of the counted selectors. These selectors add to the statistic.", ' ');
      args[:notes] << imports.note(" imported stylesheet(s) were not analyzed.", ' ');
    		end
when 8 then
# line 43 "includes/actions.rl"
		begin

      puts "\n  end ruleset \"#{data.slice(p_correct, p-p_correct).pack("c*")}\"";
      spec.add_ruleset;
    		end
when 9 then
# line 48 "includes/actions.rl"
		begin

      p_correct = p;
    		end
when 12 then
# line 60 "includes/actions.rl"
		begin

      puts " end media";
      media.add;
    		end
when 16 then
# line 81 "includes/actions.rl"
		begin

      imports.add();
      puts " end import";
    		end
when 18 then
# line 89 "includes/actions.rl"
		begin

      puts " end font-face";
    		end
when 20 then
# line 96 "includes/actions.rl"
		begin

      puts "  end page";
    		end
when 22 then
# line 102 "includes/actions.rl"
		begin

      puts " end namespace";
    		end
when 23 then
# line 107 "includes/actions.rl"
		begin

      errors = errors + 1;
      
      @tmperr = "\nParse error \##{errors}\n"
      @tmperr << data.slice(p_correct, 1+p-p_correct).pack("c*");
      @tmperr <<  "◀";
      if (p+25 < pe)
          @tmperr << data.slice(p+1, 25).pack("c*");
          @tmperr << "...\nResumed.\n";
      else
          @tmperr << data.slice(p+1, pe-p).pack("c*");
          @tmperr << "<End of File>"
      end
      print @tmperr
      @errors_list << (errors.to_s() + @tmperr)
      p = p - 1;
      	begin
		cs = 612
		_trigger_goto = true
		_goto_level = _again
		break
	end

    		end
# line 2099 "generated/parse.rb"
		end # eof action switch
	end
	if _trigger_goto
		next
	end
end
	end
	if _goto_level <= _out
		break
	end
	end
	end

# line 69 "parse.rl"

      puts "Parsing complete with #{errors} error(s).\n";
      puts args[:notes]
      puts  @errors_list;
      # parser specific variables
      # puts "Data pointer p: #{p}, Data End Pointer pe: #{pe}, Final state of the machine: #{cs}\n\n"
      puts "\na = IDs\nb = class selectors, attribute selectors, and pseudo-classes\nc = type selectors and pseudo-elements"
    end
    
 
end

class Specificity
  def initialize
    @a = @b = @c = @count = 0;
    @selector_a = @selector_b = @selector_c = 0;
    @ruleset = 0;
  end
  
  def add(abc)
    case abc
      when 'a'
        @a += 1; 
        @selector_a += 1;
      when 'b'
        @b += 1; 
        @selector_b += 1;
      when 'c'
        @c += 1; 
        @selector_c += 1; 
    end
  end
  
  def add_ruleset
    @ruleset +=1;
  end
  
  def selector_reset
    @selector_a = 0;
    @selector_b = 0;
    @selector_c = 0;
  end
  
  def selector_next
    @count += 1;
  end
  
  def selector_out
    print " a=#{@selector_a} b=#{@selector_b} c=#{@selector_c}"
  end
  
  def out
    perc = 1.0/@count;
    printf("Average specificity: a = %.3f b = %.3f c = %.3f [specificity/selector]\n", @a * perc, @b * perc, @c * perc);
    printf("Count: %d selectors in %d rulesets (average: %.3f [selectors/ruleset])\n", @count, @ruleset, @count.to_f/@ruleset);
  end
end

class Counter
  def initialize
    @count = 0;
  end
  
  def add
    @count += 1;
  end
 
  def note(string_true, string_false)
    if @count > 0
      "\n - " + @count.to_s() + string_true
    else
      if string_false != ''
        string_false
      end
    end
  end
end


class ArgumentsHash < Hash 
  
  def initialize(args) 
    
    self[:notes] = 'Note:'
    
    opts = OptionParser.new do |opts| 
      
      opts.banner = "Usage: ruby parser.rb [options]" 
      opts.separator( "Requests files from host" )
      
      opts.on('-f', '--file [STRING]', 'parses a file') do |str|
        if(File.file? str)
          self[:file] = str
          open(str) do |f| 
            self[:code] = f.read; 
          end
        else
          puts("\nError: cannot open #{str}")
          exit
        end
      end 
      
      opts.on( "-x", "--xhost [STRING]", 
              "parses from host" ) do |x|
        self[:file] = x;
        uri=URI.parse(URI.escape(x));
        puts uri
        
        if uri.scheme =="https" or uri.port == 443
         uri.scheme = "http"
         uri.port = "80"
         self[:notes] << "\n - switched URI scheme from https to http"
         
        end
        self[:file] = uri;
        response = Net::HTTP.get_response(uri)
        
          if response.is_a? Net::HTTPOK
            self[:code]= response.body 
          else
            puts("\nError: cannot open #{x} \n HTTP response code: #{response.code}")
            exit
          end
      end
      
      opts.on( "-i", "--input", "parses from STDIN until EOF (CTRL-D) is read.") do |i|
        # command-line arguments have been stripped from ARGV by OptionParser
        # the rest is in ARGF
        print "\nType in CSS code, quit with EOF (CTRL-D)\n>>>"
        self[:code] = ARGF.read;
        self[:file] = "STDIN";
      end
      
      opts.on_tail('-h', '--help', 'displays this help') do 
        puts opts 
        exit 
      end 
      
    end 
    
    begin
      opts.parse!(args)
    rescue OptionParser::InvalidOption
      puts "Error: invalid option; type -h for help"
    end

  end 
end

parser = Parser.new();
parser.run(ArgumentsHash.new(ARGV))
